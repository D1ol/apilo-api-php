<?php
/**
 * OrderApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * Dokumentacja REST API dla Apilo # Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. # Filtry dla list     Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące     wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu,     np. `.../api/orders/?limit=200`     Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) # Format daty     Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT)     stosowany jest format daty ISO 8601 w następującym formacie:     `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`     Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie     względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w     przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu     podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o     zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2021-03-01T14:00:00+0100`     <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.22.10.14
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrderApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for restApiOrdersCarrierAccountMapGet
     *
     * Get Carrier Account list.
     *
     */
    public function testRestApiOrdersCarrierAccountMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersCarrierMapGet
     *
     * Get list of Carrier.
     *
     */
    public function testRestApiOrdersCarrierMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersDocumentsMapGet
     *
     * Get document types map.
     *
     */
    public function testRestApiOrdersDocumentsMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersGet
     *
     * Get simple list of orders.
     *
     */
    public function testRestApiOrdersGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdDocumentsDocumentDelete
     *
     * Delete document for given order.
     *
     */
    public function testRestApiOrdersIdDocumentsDocumentDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdDocumentsDocumentGet
     *
     * Order Document detail.
     *
     */
    public function testRestApiOrdersIdDocumentsDocumentGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdDocumentsGet
     *
     * Get simple list of documents for given order.
     *
     */
    public function testRestApiOrdersIdDocumentsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdDocumentsPost
     *
     * Create document for order.
     *
     */
    public function testRestApiOrdersIdDocumentsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdGet
     *
     * Get detailed order by given ID.
     *
     */
    public function testRestApiOrdersIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdMediaDocumentGet
     *
     * Binary document.
     *
     */
    public function testRestApiOrdersIdMediaDocumentGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdNoteGet
     *
     * Get order notes.
     *
     */
    public function testRestApiOrdersIdNoteGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdNotePost
     *
     * Add note to order.
     *
     */
    public function testRestApiOrdersIdNotePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdPaymentPost
     *
     * Add payment to Order.
     *
     */
    public function testRestApiOrdersIdPaymentPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdShipmentGet
     *
     * List of order shipments.
     *
     */
    public function testRestApiOrdersIdShipmentGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdShipmentPost
     *
     * Add shipment to order.
     *
     */
    public function testRestApiOrdersIdShipmentPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdShipmentShipmentGet
     *
     * Shipment detail.
     *
     */
    public function testRestApiOrdersIdShipmentShipmentGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersIdStatusPut
     *
     * Update order status.
     *
     */
    public function testRestApiOrdersIdStatusPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersOrderTagGet
     *
     * Order tags list.
     *
     */
    public function testRestApiOrdersOrderTagGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersOrderTagPost
     *
     * Create order tag.
     *
     */
    public function testRestApiOrdersOrderTagPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersOrderTagTagDelete
     *
     * Delete order tag.
     *
     */
    public function testRestApiOrdersOrderTagTagDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersPaymentMapGet
     *
     * Get Payment types list.
     *
     */
    public function testRestApiOrdersPaymentMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersPlatformMapGet
     *
     * Get Platform list.
     *
     */
    public function testRestApiOrdersPlatformMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersPost
     *
     * Create a new order.
     *
     */
    public function testRestApiOrdersPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersShipmentStatusMapGet
     *
     * Get shipment status map.
     *
     */
    public function testRestApiOrdersShipmentStatusMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersStatusMapGet
     *
     * Get order Status types list.
     *
     */
    public function testRestApiOrdersStatusMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restApiOrdersTagMapGet
     *
     * Tag list.
     *
     */
    public function testRestApiOrdersTagMapGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
