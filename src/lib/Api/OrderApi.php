<?php
/**
 * OrderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * Dokumentacja REST API dla Apilo # Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. # Filtry dla list     Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące     wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu,     np. `.../api/orders/?limit=200`     Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) # Format daty     Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT)     stosowany jest format daty ISO 8601 w następującym formacie:     `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`     Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie     względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w     przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu     podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o     zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2021-03-01T14:00:00+0100`     <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.22.10.14
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Apilo\ApiException;
use Apilo\Configuration;
use Apilo\HeaderSelector;
use Apilo\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restApiOrdersCarrierAccountMapGet' => [
            'application/json',
        ],
        'restApiOrdersCarrierMapGet' => [
            'application/json',
        ],
        'restApiOrdersDocumentsMapGet' => [
            'application/json',
        ],
        'restApiOrdersGet' => [
            'application/json',
        ],
        'restApiOrdersIdDocumentsDocumentDelete' => [
            'application/json',
        ],
        'restApiOrdersIdDocumentsDocumentGet' => [
            'application/json',
        ],
        'restApiOrdersIdDocumentsGet' => [
            'application/json',
        ],
        'restApiOrdersIdDocumentsPost' => [
            'application/json',
        ],
        'restApiOrdersIdGet' => [
            'application/json',
        ],
        'restApiOrdersIdMediaDocumentGet' => [
            'application/json',
        ],
        'restApiOrdersIdNoteGet' => [
            'application/json',
        ],
        'restApiOrdersIdNotePost' => [
            'application/json',
        ],
        'restApiOrdersIdPaymentPost' => [
            'application/json',
        ],
        'restApiOrdersIdShipmentGet' => [
            'application/json',
        ],
        'restApiOrdersIdShipmentPost' => [
            'application/json',
        ],
        'restApiOrdersIdShipmentShipmentGet' => [
            'application/json',
        ],
        'restApiOrdersIdStatusPut' => [
            'application/json',
        ],
        'restApiOrdersOrderTagGet' => [
            'application/json',
        ],
        'restApiOrdersOrderTagPost' => [
            'application/json',
        ],
        'restApiOrdersOrderTagTagDelete' => [
            'application/json',
        ],
        'restApiOrdersPaymentMapGet' => [
            'application/json',
        ],
        'restApiOrdersPlatformMapGet' => [
            'application/json',
        ],
        'restApiOrdersPost' => [
            'application/json',
        ],
        'restApiOrdersShipmentStatusMapGet' => [
            'application/json',
        ],
        'restApiOrdersStatusMapGet' => [
            'application/json',
        ],
        'restApiOrdersTagMapGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restApiOrdersCarrierAccountMapGet
     *
     * Get Carrier Account list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierAccountMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersCarrierAccountMapGet(string $contentType = self::contentTypes['restApiOrdersCarrierAccountMapGet'][0])
    {
        list($response) = $this->restApiOrdersCarrierAccountMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersCarrierAccountMapGetWithHttpInfo
     *
     * Get Carrier Account list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierAccountMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersCarrierAccountMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersCarrierAccountMapGet'][0])
    {
        $request = $this->restApiOrdersCarrierAccountMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\MappingDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\MappingDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\MappingDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\MappingDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersCarrierAccountMapGetAsync
     *
     * Get Carrier Account list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierAccountMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersCarrierAccountMapGetAsync(string $contentType = self::contentTypes['restApiOrdersCarrierAccountMapGet'][0])
    {
        return $this->restApiOrdersCarrierAccountMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersCarrierAccountMapGetAsyncWithHttpInfo
     *
     * Get Carrier Account list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierAccountMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersCarrierAccountMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersCarrierAccountMapGet'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->restApiOrdersCarrierAccountMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersCarrierAccountMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierAccountMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersCarrierAccountMapGetRequest(string $contentType = self::contentTypes['restApiOrdersCarrierAccountMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/carrier-account/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersCarrierMapGet
     *
     * Get list of Carrier
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersCarrierMapGet(string $contentType = self::contentTypes['restApiOrdersCarrierMapGet'][0])
    {
        list($response) = $this->restApiOrdersCarrierMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersCarrierMapGetWithHttpInfo
     *
     * Get list of Carrier
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersCarrierMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersCarrierMapGet'][0])
    {
        $request = $this->restApiOrdersCarrierMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\MappingDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\MappingDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\MappingDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\MappingDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersCarrierMapGetAsync
     *
     * Get list of Carrier
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersCarrierMapGetAsync(string $contentType = self::contentTypes['restApiOrdersCarrierMapGet'][0])
    {
        return $this->restApiOrdersCarrierMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersCarrierMapGetAsyncWithHttpInfo
     *
     * Get list of Carrier
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersCarrierMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersCarrierMapGet'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->restApiOrdersCarrierMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersCarrierMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersCarrierMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersCarrierMapGetRequest(string $contentType = self::contentTypes['restApiOrdersCarrierMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/carrier/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersDocumentsMapGet
     *
     * Get document types map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersDocumentsMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersDocumentsMapGet(string $contentType = self::contentTypes['restApiOrdersDocumentsMapGet'][0])
    {
        list($response) = $this->restApiOrdersDocumentsMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersDocumentsMapGetWithHttpInfo
     *
     * Get document types map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersDocumentsMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersDocumentsMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersDocumentsMapGet'][0])
    {
        $request = $this->restApiOrdersDocumentsMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersDocumentsMapGetAsync
     *
     * Get document types map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersDocumentsMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersDocumentsMapGetAsync(string $contentType = self::contentTypes['restApiOrdersDocumentsMapGet'][0])
    {
        return $this->restApiOrdersDocumentsMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersDocumentsMapGetAsyncWithHttpInfo
     *
     * Get document types map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersDocumentsMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersDocumentsMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersDocumentsMapGet'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersDocumentsMapGet200ResponseInner[]';
        $request = $this->restApiOrdersDocumentsMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersDocumentsMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersDocumentsMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersDocumentsMapGetRequest(string $contentType = self::contentTypes['restApiOrdersDocumentsMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/documents/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersGet
     *
     * Get simple list of orders
     *
     * @param  string $created_after date of order creation from in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before date of order creation from customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_after date of order to customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_after update date to in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $is_order_document determines whether a document exists for the order, takes the value of 1 or 0 (optional)
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (optional)
     * @param  string $id_external external order number, e.g. &lt;code&gt;5200669628624&lt;/code&gt; (optional)
     * @param  int $order_status Order status according to the &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1status~1map~1/get&#39;&gt;order status map&lt;/a&gt; (optional)
     * @param  string $sort Sort options (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersGet200Response|\Apilo\Model\RestBundleException3
     */
    public function restApiOrdersGet($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersGet'][0])
    {
        list($response) = $this->restApiOrdersGetWithHttpInfo($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $sort, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersGetWithHttpInfo
     *
     * Get simple list of orders
     *
     * @param  string $created_after date of order creation from in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before date of order creation from customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_after date of order to customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_after update date to in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $is_order_document determines whether a document exists for the order, takes the value of 1 or 0 (optional)
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (optional)
     * @param  string $id_external external order number, e.g. &lt;code&gt;5200669628624&lt;/code&gt; (optional)
     * @param  int $order_status Order status according to the &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1status~1map~1/get&#39;&gt;order status map&lt;/a&gt; (optional)
     * @param  string $sort Sort options (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersGet200Response|\Apilo\Model\RestBundleException3, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersGetWithHttpInfo($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersGet'][0])
    {
        $request = $this->restApiOrdersGetRequest($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $sort, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException3' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersGetAsync
     *
     * Get simple list of orders
     *
     * @param  string $created_after date of order creation from in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before date of order creation from customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_after date of order to customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_after update date to in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $is_order_document determines whether a document exists for the order, takes the value of 1 or 0 (optional)
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (optional)
     * @param  string $id_external external order number, e.g. &lt;code&gt;5200669628624&lt;/code&gt; (optional)
     * @param  int $order_status Order status according to the &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1status~1map~1/get&#39;&gt;order status map&lt;/a&gt; (optional)
     * @param  string $sort Sort options (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersGetAsync($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersGet'][0])
    {
        return $this->restApiOrdersGetAsyncWithHttpInfo($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $sort, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersGetAsyncWithHttpInfo
     *
     * Get simple list of orders
     *
     * @param  string $created_after date of order creation from in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before date of order creation from customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_after date of order to customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_after update date to in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $is_order_document determines whether a document exists for the order, takes the value of 1 or 0 (optional)
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (optional)
     * @param  string $id_external external order number, e.g. &lt;code&gt;5200669628624&lt;/code&gt; (optional)
     * @param  int $order_status Order status according to the &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1status~1map~1/get&#39;&gt;order status map&lt;/a&gt; (optional)
     * @param  string $sort Sort options (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersGetAsyncWithHttpInfo($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersGet'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersGet200Response';
        $request = $this->restApiOrdersGetRequest($created_after, $created_before, $ordered_after, $ordered_before, $updated_after, $updated_before, $is_order_document, $id, $id_external, $order_status, $sort, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersGet'
     *
     * @param  string $created_after date of order creation from in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before date of order creation from customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_after date of order to customer, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $ordered_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_after update date to in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $updated_before update date from in Apilo system, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $is_order_document determines whether a document exists for the order, takes the value of 1 or 0 (optional)
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (optional)
     * @param  string $id_external external order number, e.g. &lt;code&gt;5200669628624&lt;/code&gt; (optional)
     * @param  int $order_status Order status according to the &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1status~1map~1/get&#39;&gt;order status map&lt;/a&gt; (optional)
     * @param  string $sort Sort options (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersGetRequest($created_after = null, $created_before = null, $ordered_after = null, $ordered_before = null, $updated_after = null, $updated_before = null, $is_order_document = null, $id = null, $id_external = null, $order_status = null, $sort = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersGet'][0])
    {

        if ($created_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_after)) {
            throw new \InvalidArgumentException("invalid value for \"created_after\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($created_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_before)) {
            throw new \InvalidArgumentException("invalid value for \"created_before\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($ordered_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $ordered_after)) {
            throw new \InvalidArgumentException("invalid value for \"ordered_after\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($ordered_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $ordered_before)) {
            throw new \InvalidArgumentException("invalid value for \"ordered_before\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($updated_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $updated_after)) {
            throw new \InvalidArgumentException("invalid value for \"updated_after\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($updated_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $updated_before)) {
            throw new \InvalidArgumentException("invalid value for \"updated_before\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($is_order_document !== null && $is_order_document > 1) {
            throw new \InvalidArgumentException('invalid value for "$is_order_document" when calling OrderApi.restApiOrdersGet, must be smaller than or equal to 1.');
        }
        if ($is_order_document !== null && $is_order_document < 0) {
            throw new \InvalidArgumentException('invalid value for "$is_order_document" when calling OrderApi.restApiOrdersGet, must be bigger than or equal to 0.');
        }
        
        if ($id !== null && strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersGet, must be smaller than or equal to 11.');
        }
        if ($id !== null && strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersGet, must be bigger than or equal to 10.');
        }
        if ($id !== null && !preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        if ($id_external !== null && strlen($id_external) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_external" when calling OrderApi.restApiOrdersGet, must be smaller than or equal to 36.');
        }
        
        if ($order_status !== null && $order_status < 1) {
            throw new \InvalidArgumentException('invalid value for "$order_status" when calling OrderApi.restApiOrdersGet, must be bigger than or equal to 1.');
        }
        

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.restApiOrdersGet, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.restApiOrdersGet, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.restApiOrdersGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordered_after,
            'orderedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordered_before,
            'orderedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_after,
            'updatedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updated_before,
            'updatedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_order_document,
            'isOrderDocument', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_external,
            'idExternal', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status,
            'orderStatus', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentDelete
     *
     * Delete document for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiOrdersIdDocumentsDocumentDelete($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'][0])
    {
        $this->restApiOrdersIdDocumentsDocumentDeleteWithHttpInfo($id, $document, $contentType);
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentDeleteWithHttpInfo
     *
     * Delete document for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdDocumentsDocumentDeleteWithHttpInfo($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'][0])
    {
        $request = $this->restApiOrdersIdDocumentsDocumentDeleteRequest($id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentDeleteAsync
     *
     * Delete document for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsDocumentDeleteAsync($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'][0])
    {
        return $this->restApiOrdersIdDocumentsDocumentDeleteAsyncWithHttpInfo($id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentDeleteAsyncWithHttpInfo
     *
     * Delete document for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsDocumentDeleteAsyncWithHttpInfo($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'][0])
    {
        $returnType = '';
        $request = $this->restApiOrdersIdDocumentsDocumentDeleteRequest($id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdDocumentsDocumentDelete'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdDocumentsDocumentDeleteRequest($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdDocumentsDocumentDelete'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsDocumentDelete, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsDocumentDelete, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdDocumentsDocumentDelete, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling restApiOrdersIdDocumentsDocumentDelete'
            );
        }
        if ($document < 1) {
            throw new \InvalidArgumentException('invalid value for "$document" when calling OrderApi.restApiOrdersIdDocumentsDocumentDelete, must be bigger than or equal to 1.');
        }
        if (!preg_match("/[0-9]+/", $document)) {
            throw new \InvalidArgumentException("invalid value for \"document\" when calling OrderApi.restApiOrdersIdDocumentsDocumentDelete, must conform to the pattern /[0-9]+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/documents/{document}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($document !== null) {
            $resourcePath = str_replace(
                '{' . 'document' . '}',
                ObjectSerializer::toPathValue($document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentGet
     *
     * Order Document detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersIdDocumentsDocumentGet($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentGet'][0])
    {
        list($response) = $this->restApiOrdersIdDocumentsDocumentGetWithHttpInfo($id, $document, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentGetWithHttpInfo
     *
     * Order Document detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdDocumentsDocumentGetWithHttpInfo($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentGet'][0])
    {
        $request = $this->restApiOrdersIdDocumentsDocumentGetRequest($id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestOrderDocumentDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderDocumentDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderDocumentDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestOrderDocumentDTO2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentGetAsync
     *
     * Order Document detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsDocumentGetAsync($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentGet'][0])
    {
        return $this->restApiOrdersIdDocumentsDocumentGetAsyncWithHttpInfo($id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdDocumentsDocumentGetAsyncWithHttpInfo
     *
     * Order Document detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsDocumentGetAsyncWithHttpInfo($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentGet'][0])
    {
        $returnType = '\Apilo\Model\RestOrderDocumentDTO2';
        $request = $this->restApiOrdersIdDocumentsDocumentGetRequest($id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdDocumentsDocumentGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdDocumentsDocumentGetRequest($id, $document, string $contentType = self::contentTypes['restApiOrdersIdDocumentsDocumentGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdDocumentsDocumentGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsDocumentGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsDocumentGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdDocumentsDocumentGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling restApiOrdersIdDocumentsDocumentGet'
            );
        }
        if ($document < 1) {
            throw new \InvalidArgumentException('invalid value for "$document" when calling OrderApi.restApiOrdersIdDocumentsDocumentGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/\\d+/", $document)) {
            throw new \InvalidArgumentException("invalid value for \"document\" when calling OrderApi.restApiOrdersIdDocumentsDocumentGet, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/documents/{document}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($document !== null) {
            $resourcePath = str_replace(
                '{' . 'document' . '}',
                ObjectSerializer::toPathValue($document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdDocumentsGet
     *
     * Get simple list of documents for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $id2 ID of the document (optional)
     * @param  string $id_external External unique ID of the document (optional)
     * @param  string $number External document number (optional)
     * @param  int $type Document type - &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1documents~1map~1/get&#39;&gt;order document types endpoint&lt;/a&gt; (optional)
     * @param  string $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersIdDocumentsGet200Response|object
     */
    public function restApiOrdersIdDocumentsGet($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdDocumentsGet'][0])
    {
        list($response) = $this->restApiOrdersIdDocumentsGetWithHttpInfo($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdDocumentsGetWithHttpInfo
     *
     * Get simple list of documents for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $id2 ID of the document (optional)
     * @param  string $id_external External unique ID of the document (optional)
     * @param  string $number External document number (optional)
     * @param  int $type Document type - &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1documents~1map~1/get&#39;&gt;order document types endpoint&lt;/a&gt; (optional)
     * @param  string $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersIdDocumentsGet200Response|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdDocumentsGetWithHttpInfo($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdDocumentsGet'][0])
    {
        $request = $this->restApiOrdersIdDocumentsGetRequest($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersIdDocumentsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersIdDocumentsGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersIdDocumentsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersIdDocumentsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersIdDocumentsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdDocumentsGetAsync
     *
     * Get simple list of documents for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $id2 ID of the document (optional)
     * @param  string $id_external External unique ID of the document (optional)
     * @param  string $number External document number (optional)
     * @param  int $type Document type - &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1documents~1map~1/get&#39;&gt;order document types endpoint&lt;/a&gt; (optional)
     * @param  string $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsGetAsync($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdDocumentsGet'][0])
    {
        return $this->restApiOrdersIdDocumentsGetAsyncWithHttpInfo($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdDocumentsGetAsyncWithHttpInfo
     *
     * Get simple list of documents for given order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $id2 ID of the document (optional)
     * @param  string $id_external External unique ID of the document (optional)
     * @param  string $number External document number (optional)
     * @param  int $type Document type - &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1documents~1map~1/get&#39;&gt;order document types endpoint&lt;/a&gt; (optional)
     * @param  string $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsGetAsyncWithHttpInfo($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdDocumentsGet'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersIdDocumentsGet200Response';
        $request = $this->restApiOrdersIdDocumentsGetRequest($id, $id2, $id_external, $number, $type, $created_after, $created_before, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdDocumentsGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $id2 ID of the document (optional)
     * @param  string $id_external External unique ID of the document (optional)
     * @param  string $number External document number (optional)
     * @param  int $type Document type - &lt;a href&#x3D;&#39;#tag/order/paths/~1rest~1api~1orders~1documents~1map~1/get&#39;&gt;order document types endpoint&lt;/a&gt; (optional)
     * @param  string $created_after start date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  string $created_before end date of document creation in Apilo, takes the value of ISO 8601 date encoded to URL, e.g. &lt;code&gt;2022-03-01T14:40:33%2B0200&lt;/code&gt; (optional)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdDocumentsGetRequest($id, $id2 = null, $id_external = null, $number = null, $type = null, $created_after = null, $created_before = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdDocumentsGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdDocumentsGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdDocumentsGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        if ($id2 !== null && $id2 < 1) {
            throw new \InvalidArgumentException('invalid value for "$id2" when calling OrderApi.restApiOrdersIdDocumentsGet, must be bigger than or equal to 1.');
        }
        
        if ($id_external !== null && strlen($id_external) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_external" when calling OrderApi.restApiOrdersIdDocumentsGet, must be smaller than or equal to 36.');
        }
        


        if ($created_after !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_after)) {
            throw new \InvalidArgumentException("invalid value for \"created_after\" when calling OrderApi.restApiOrdersIdDocumentsGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($created_before !== null && !preg_match("/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/", $created_before)) {
            throw new \InvalidArgumentException("invalid value for \"created_before\" when calling OrderApi.restApiOrdersIdDocumentsGet, must conform to the pattern /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(Z|\\+\\d{2}:?\\d{2})$/.");
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.restApiOrdersIdDocumentsGet, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.restApiOrdersIdDocumentsGet, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.restApiOrdersIdDocumentsGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/{id}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id2,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_external,
            'idExternal', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdDocumentsPost
     *
     * Create document for order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO3 $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersIdDocumentsPost($id, $body, string $contentType = self::contentTypes['restApiOrdersIdDocumentsPost'][0])
    {
        list($response) = $this->restApiOrdersIdDocumentsPostWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdDocumentsPostWithHttpInfo
     *
     * Create document for order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestOrderDocumentDTO2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdDocumentsPostWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdDocumentsPost'][0])
    {
        $request = $this->restApiOrdersIdDocumentsPostRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestOrderDocumentDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderDocumentDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderDocumentDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Apilo\Model\RestOrderDocumentDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderDocumentDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderDocumentDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestOrderDocumentDTO2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderDocumentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdDocumentsPostAsync
     *
     * Create document for order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsPostAsync($id, $body, string $contentType = self::contentTypes['restApiOrdersIdDocumentsPost'][0])
    {
        return $this->restApiOrdersIdDocumentsPostAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdDocumentsPostAsyncWithHttpInfo
     *
     * Create document for order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdDocumentsPostAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdDocumentsPost'][0])
    {
        $returnType = '\Apilo\Model\RestOrderDocumentDTO2';
        $request = $this->restApiOrdersIdDocumentsPostRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdDocumentsPost'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderDocumentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdDocumentsPostRequest($id, $body, string $contentType = self::contentTypes['restApiOrdersIdDocumentsPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdDocumentsPost'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsPost, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdDocumentsPost, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdDocumentsPost, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiOrdersIdDocumentsPost'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdGet
     *
     * Get detailed order by given ID
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return RestOrderReadDTO2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersIdGet($id, string $contentType = self::contentTypes['restApiOrdersIdGet'][0])
    {
        list($response) = $this->restApiOrdersIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdGetWithHttpInfo
     *
     * Get detailed order by given ID
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of RestOrderReadDTO2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdGetWithHttpInfo($id, string $contentType = self::contentTypes['restApiOrdersIdGet'][0])
    {
        $request = $this->restApiOrdersIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('RestOrderReadDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('RestOrderReadDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'RestOrderReadDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestOrderReadDTO2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'RestOrderReadDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdGetAsync
     *
     * Get detailed order by given ID
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdGetAsync($id, string $contentType = self::contentTypes['restApiOrdersIdGet'][0])
    {
        return $this->restApiOrdersIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdGetAsyncWithHttpInfo
     *
     * Get detailed order by given ID
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['restApiOrdersIdGet'][0])
    {
        $returnType = '\Apilo\Model\RestOrderReadDTO2';
        $request = $this->restApiOrdersIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdGetRequest($id, string $contentType = self::contentTypes['restApiOrdersIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdMediaDocumentGet
     *
     * Binary document
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdMediaDocumentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function restApiOrdersIdMediaDocumentGet($id, $document, string $contentType = self::contentTypes['restApiOrdersIdMediaDocumentGet'][0])
    {
        list($response) = $this->restApiOrdersIdMediaDocumentGetWithHttpInfo($id, $document, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdMediaDocumentGetWithHttpInfo
     *
     * Binary document
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdMediaDocumentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdMediaDocumentGetWithHttpInfo($id, $document, string $contentType = self::contentTypes['restApiOrdersIdMediaDocumentGet'][0])
    {
        $request = $this->restApiOrdersIdMediaDocumentGetRequest($id, $document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdMediaDocumentGetAsync
     *
     * Binary document
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdMediaDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdMediaDocumentGetAsync($id, $document, string $contentType = self::contentTypes['restApiOrdersIdMediaDocumentGet'][0])
    {
        return $this->restApiOrdersIdMediaDocumentGetAsyncWithHttpInfo($id, $document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdMediaDocumentGetAsyncWithHttpInfo
     *
     * Binary document
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdMediaDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdMediaDocumentGetAsyncWithHttpInfo($id, $document, string $contentType = self::contentTypes['restApiOrdersIdMediaDocumentGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->restApiOrdersIdMediaDocumentGetRequest($id, $document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdMediaDocumentGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $document ID of the document or shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdMediaDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdMediaDocumentGetRequest($id, $document, string $contentType = self::contentTypes['restApiOrdersIdMediaDocumentGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdMediaDocumentGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdMediaDocumentGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdMediaDocumentGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdMediaDocumentGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling restApiOrdersIdMediaDocumentGet'
            );
        }
        if ($document < 1) {
            throw new \InvalidArgumentException('invalid value for "$document" when calling OrderApi.restApiOrdersIdMediaDocumentGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/\\d+/", $document)) {
            throw new \InvalidArgumentException("invalid value for \"document\" when calling OrderApi.restApiOrdersIdMediaDocumentGet, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/media/{document}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($document !== null) {
            $resourcePath = str_replace(
                '{' . 'document' . '}',
                ObjectSerializer::toPathValue($document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdNoteGet
     *
     * Get order notes
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNoteGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderNoteDTO[]|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersIdNoteGet($id, string $contentType = self::contentTypes['restApiOrdersIdNoteGet'][0])
    {
        list($response) = $this->restApiOrdersIdNoteGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdNoteGetWithHttpInfo
     *
     * Get order notes
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNoteGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderNoteDTO[]|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdNoteGetWithHttpInfo($id, string $contentType = self::contentTypes['restApiOrdersIdNoteGet'][0])
    {
        $request = $this->restApiOrdersIdNoteGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestOrderNoteDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderNoteDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderNoteDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestOrderNoteDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderNoteDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdNoteGetAsync
     *
     * Get order notes
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNoteGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdNoteGetAsync($id, string $contentType = self::contentTypes['restApiOrdersIdNoteGet'][0])
    {
        return $this->restApiOrdersIdNoteGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdNoteGetAsyncWithHttpInfo
     *
     * Get order notes
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNoteGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdNoteGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['restApiOrdersIdNoteGet'][0])
    {
        $returnType = '\Apilo\Model\RestOrderNoteDTO[]';
        $request = $this->restApiOrdersIdNoteGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdNoteGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNoteGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdNoteGetRequest($id, string $contentType = self::contentTypes['restApiOrdersIdNoteGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdNoteGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdNoteGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdNoteGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdNoteGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/note/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdNotePost
     *
     * Add note to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2 $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNotePost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiOrdersIdNotePost($id, $body = null, string $contentType = self::contentTypes['restApiOrdersIdNotePost'][0])
    {
        $this->restApiOrdersIdNotePostWithHttpInfo($id, $body, $contentType);
    }

    /**
     * Operation restApiOrdersIdNotePostWithHttpInfo
     *
     * Add note to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNotePost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdNotePostWithHttpInfo($id, $body = null, string $contentType = self::contentTypes['restApiOrdersIdNotePost'][0])
    {
        $request = $this->restApiOrdersIdNotePostRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdNotePostAsync
     *
     * Add note to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNotePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdNotePostAsync($id, $body = null, string $contentType = self::contentTypes['restApiOrdersIdNotePost'][0])
    {
        return $this->restApiOrdersIdNotePostAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdNotePostAsyncWithHttpInfo
     *
     * Add note to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNotePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdNotePostAsyncWithHttpInfo($id, $body = null, string $contentType = self::contentTypes['restApiOrdersIdNotePost'][0])
    {
        $returnType = '';
        $request = $this->restApiOrdersIdNotePostRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdNotePost'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderNoteDTO2 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdNotePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdNotePostRequest($id, $body = null, string $contentType = self::contentTypes['restApiOrdersIdNotePost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdNotePost'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdNotePost, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdNotePost, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdNotePost, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        


        $resourcePath = '/rest/api/orders/{id}/note/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdPaymentPost
     *
     * Add payment to Order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentsDTO $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdPaymentPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiOrdersIdPaymentPost($id, $body, string $contentType = self::contentTypes['restApiOrdersIdPaymentPost'][0])
    {
        $this->restApiOrdersIdPaymentPostWithHttpInfo($id, $body, $contentType);
    }

    /**
     * Operation restApiOrdersIdPaymentPostWithHttpInfo
     *
     * Add payment to Order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentsDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdPaymentPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdPaymentPostWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdPaymentPost'][0])
    {
        $request = $this->restApiOrdersIdPaymentPostRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersIdPaymentPost201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdPaymentPostAsync
     *
     * Add payment to Order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentsDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdPaymentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdPaymentPostAsync($id, $body, string $contentType = self::contentTypes['restApiOrdersIdPaymentPost'][0])
    {
        return $this->restApiOrdersIdPaymentPostAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdPaymentPostAsyncWithHttpInfo
     *
     * Add payment to Order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentsDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdPaymentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdPaymentPostAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdPaymentPost'][0])
    {
        $returnType = '';
        $request = $this->restApiOrdersIdPaymentPostRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdPaymentPost'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderPaymentsDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdPaymentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdPaymentPostRequest($id, $body, string $contentType = self::contentTypes['restApiOrdersIdPaymentPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdPaymentPost'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdPaymentPost, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdPaymentPost, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdPaymentPost, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiOrdersIdPaymentPost'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/payment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdShipmentGet
     *
     * List of order shipments
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersIdShipmentGet200Response|object
     */
    public function restApiOrdersIdShipmentGet($id, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdShipmentGet'][0])
    {
        list($response) = $this->restApiOrdersIdShipmentGetWithHttpInfo($id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdShipmentGetWithHttpInfo
     *
     * List of order shipments
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersIdShipmentGet200Response|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdShipmentGetWithHttpInfo($id, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdShipmentGet'][0])
    {
        $request = $this->restApiOrdersIdShipmentGetRequest($id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersIdShipmentGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersIdShipmentGet200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersIdShipmentGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersIdShipmentGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersIdShipmentGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdShipmentGetAsync
     *
     * List of order shipments
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdShipmentGetAsync($id, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdShipmentGet'][0])
    {
        return $this->restApiOrdersIdShipmentGetAsyncWithHttpInfo($id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdShipmentGetAsyncWithHttpInfo
     *
     * List of order shipments
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdShipmentGetAsyncWithHttpInfo($id, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdShipmentGet'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersIdShipmentGet200Response';
        $request = $this->restApiOrdersIdShipmentGetRequest($id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdShipmentGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $offset Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records) (optional)
     * @param  int $limit Limit of returned results, max 512 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdShipmentGetRequest($id, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiOrdersIdShipmentGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdShipmentGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdShipmentGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdShipmentGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdShipmentGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrderApi.restApiOrdersIdShipmentGet, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 512) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.restApiOrdersIdShipmentGet, must be smaller than or equal to 512.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.restApiOrdersIdShipmentGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/rest/api/orders/{id}/shipment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdShipmentPost
     *
     * Add shipment to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO3 $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderShipmentDTO2|\Apilo\Model\RestOrderShipmentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException
     */
    public function restApiOrdersIdShipmentPost($id, $body, string $contentType = self::contentTypes['restApiOrdersIdShipmentPost'][0])
    {
        list($response) = $this->restApiOrdersIdShipmentPostWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdShipmentPostWithHttpInfo
     *
     * Add shipment to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderShipmentDTO2|\Apilo\Model\RestOrderShipmentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdShipmentPostWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdShipmentPost'][0])
    {
        $request = $this->restApiOrdersIdShipmentPostRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestOrderShipmentDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderShipmentDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderShipmentDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Apilo\Model\RestOrderShipmentDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderShipmentDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderShipmentDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestOrderShipmentDTO2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderShipmentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderShipmentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdShipmentPostAsync
     *
     * Add shipment to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdShipmentPostAsync($id, $body, string $contentType = self::contentTypes['restApiOrdersIdShipmentPost'][0])
    {
        return $this->restApiOrdersIdShipmentPostAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdShipmentPostAsyncWithHttpInfo
     *
     * Add shipment to order
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdShipmentPostAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdShipmentPost'][0])
    {
        $returnType = '\Apilo\Model\RestOrderShipmentDTO2';
        $request = $this->restApiOrdersIdShipmentPostRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdShipmentPost'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestOrderShipmentDTO3 $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdShipmentPostRequest($id, $body, string $contentType = self::contentTypes['restApiOrdersIdShipmentPost'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdShipmentPost'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdShipmentPost, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdShipmentPost, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdShipmentPost, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiOrdersIdShipmentPost'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/shipment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdShipmentShipmentGet
     *
     * Shipment detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentShipmentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestOrderShipmentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersIdShipmentShipmentGet($id, $shipment, string $contentType = self::contentTypes['restApiOrdersIdShipmentShipmentGet'][0])
    {
        list($response) = $this->restApiOrdersIdShipmentShipmentGetWithHttpInfo($id, $shipment, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdShipmentShipmentGetWithHttpInfo
     *
     * Shipment detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentShipmentGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestOrderShipmentDTO2|\Apilo\Model\RestBundleException|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdShipmentShipmentGetWithHttpInfo($id, $shipment, string $contentType = self::contentTypes['restApiOrdersIdShipmentShipmentGet'][0])
    {
        $request = $this->restApiOrdersIdShipmentShipmentGetRequest($id, $shipment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestOrderShipmentDTO2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestOrderShipmentDTO2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestOrderShipmentDTO2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestOrderShipmentDTO2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestOrderShipmentDTO2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdShipmentShipmentGetAsync
     *
     * Shipment detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentShipmentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdShipmentShipmentGetAsync($id, $shipment, string $contentType = self::contentTypes['restApiOrdersIdShipmentShipmentGet'][0])
    {
        return $this->restApiOrdersIdShipmentShipmentGetAsyncWithHttpInfo($id, $shipment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdShipmentShipmentGetAsyncWithHttpInfo
     *
     * Shipment detail
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentShipmentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdShipmentShipmentGetAsyncWithHttpInfo($id, $shipment, string $contentType = self::contentTypes['restApiOrdersIdShipmentShipmentGet'][0])
    {
        $returnType = '\Apilo\Model\RestOrderShipmentDTO2';
        $request = $this->restApiOrdersIdShipmentShipmentGetRequest($id, $shipment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdShipmentShipmentGet'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  int $shipment ID of the shipment belongs to the Apilo order (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdShipmentShipmentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdShipmentShipmentGetRequest($id, $shipment, string $contentType = self::contentTypes['restApiOrdersIdShipmentShipmentGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdShipmentShipmentGet'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdShipmentShipmentGet, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdShipmentShipmentGet, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdShipmentShipmentGet, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'shipment' is set
        if ($shipment === null || (is_array($shipment) && count($shipment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment when calling restApiOrdersIdShipmentShipmentGet'
            );
        }
        if (!preg_match("/\\d+/", $shipment)) {
            throw new \InvalidArgumentException("invalid value for \"shipment\" when calling OrderApi.restApiOrdersIdShipmentShipmentGet, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/orders/{id}/shipment/{shipment}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($shipment !== null) {
            $resourcePath = str_replace(
                '{' . 'shipment' . '}',
                ObjectSerializer::toPathValue($shipment),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersIdStatusPut
     *
     * Update order status
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdStatusPut'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersIdStatusPut200Response|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersIdStatusPut($id, $body, string $contentType = self::contentTypes['restApiOrdersIdStatusPut'][0])
    {
        list($response) = $this->restApiOrdersIdStatusPutWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersIdStatusPutWithHttpInfo
     *
     * Update order status
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdStatusPut'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersIdStatusPut200Response|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersIdStatusPutWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdStatusPut'][0])
    {
        $request = $this->restApiOrdersIdStatusPutRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersIdStatusPut200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersIdStatusPut200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersIdStatusPut200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersIdStatusPut200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersIdStatusPut200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersIdStatusPutAsync
     *
     * Update order status
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdStatusPutAsync($id, $body, string $contentType = self::contentTypes['restApiOrdersIdStatusPut'][0])
    {
        return $this->restApiOrdersIdStatusPutAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersIdStatusPutAsyncWithHttpInfo
     *
     * Update order status
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersIdStatusPutAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['restApiOrdersIdStatusPut'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersIdStatusPut200Response';
        $request = $this->restApiOrdersIdStatusPutRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersIdStatusPut'
     *
     * @param  string $id order number in Apilo system, e.g. &lt;code&gt;AL0012345&lt;/code&gt; (required)
     * @param  \Apilo\Model\RestStatusOrderDTO $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersIdStatusPutRequest($id, $body, string $contentType = self::contentTypes['restApiOrdersIdStatusPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiOrdersIdStatusPut'
            );
        }
        if (strlen($id) > 11) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdStatusPut, must be smaller than or equal to 11.');
        }
        if (strlen($id) < 10) {
            throw new \InvalidArgumentException('invalid length for "$id" when calling OrderApi.restApiOrdersIdStatusPut, must be bigger than or equal to 10.');
        }
        if (!preg_match("/^[A-Z0-9\\.|]{10,11}$/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling OrderApi.restApiOrdersIdStatusPut, must conform to the pattern /^[A-Z0-9\\.|]{10,11}$/.");
        }
        
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiOrdersIdStatusPut'
            );
        }


        $resourcePath = '/rest/api/orders/{id}/status/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersOrderTagGet
     *
     * Order tags list
     *
     * @param  string $order Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\Tags|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersOrderTagGet($order, string $contentType = self::contentTypes['restApiOrdersOrderTagGet'][0])
    {
        list($response) = $this->restApiOrdersOrderTagGetWithHttpInfo($order, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersOrderTagGetWithHttpInfo
     *
     * Order tags list
     *
     * @param  string $order Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\Tags|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersOrderTagGetWithHttpInfo($order, string $contentType = self::contentTypes['restApiOrdersOrderTagGet'][0])
    {
        $request = $this->restApiOrdersOrderTagGetRequest($order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\Tags' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\Tags' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\Tags', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\Tags';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\Tags',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersOrderTagGetAsync
     *
     * Order tags list
     *
     * @param  string $order Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersOrderTagGetAsync($order, string $contentType = self::contentTypes['restApiOrdersOrderTagGet'][0])
    {
        return $this->restApiOrdersOrderTagGetAsyncWithHttpInfo($order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersOrderTagGetAsyncWithHttpInfo
     *
     * Order tags list
     *
     * @param  string $order Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersOrderTagGetAsyncWithHttpInfo($order, string $contentType = self::contentTypes['restApiOrdersOrderTagGet'][0])
    {
        $returnType = '\Apilo\Model\Tags';
        $request = $this->restApiOrdersOrderTagGetRequest($order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersOrderTagGet'
     *
     * @param  string $order Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersOrderTagGetRequest($order, string $contentType = self::contentTypes['restApiOrdersOrderTagGet'][0])
    {

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling restApiOrdersOrderTagGet'
            );
        }


        $resourcePath = '/rest/api/orders/{order}/tag/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order !== null) {
            $resourcePath = str_replace(
                '{' . 'order' . '}',
                ObjectSerializer::toPathValue($order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersOrderTagPost
     *
     * Create order tag
     *
     * @param  string $order Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiOrdersOrderTagPost($order, $body, string $contentType = self::contentTypes['restApiOrdersOrderTagPost'][0])
    {
        $this->restApiOrdersOrderTagPostWithHttpInfo($order, $body, $contentType);
    }

    /**
     * Operation restApiOrdersOrderTagPostWithHttpInfo
     *
     * Create order tag
     *
     * @param  string $order Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersOrderTagPostWithHttpInfo($order, $body, string $contentType = self::contentTypes['restApiOrdersOrderTagPost'][0])
    {
        $request = $this->restApiOrdersOrderTagPostRequest($order, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersOrderTagPostAsync
     *
     * Create order tag
     *
     * @param  string $order Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersOrderTagPostAsync($order, $body, string $contentType = self::contentTypes['restApiOrdersOrderTagPost'][0])
    {
        return $this->restApiOrdersOrderTagPostAsyncWithHttpInfo($order, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersOrderTagPostAsyncWithHttpInfo
     *
     * Create order tag
     *
     * @param  string $order Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersOrderTagPostAsyncWithHttpInfo($order, $body, string $contentType = self::contentTypes['restApiOrdersOrderTagPost'][0])
    {
        $returnType = '';
        $request = $this->restApiOrdersOrderTagPostRequest($order, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersOrderTagPost'
     *
     * @param  string $order Order ID (required)
     * @param  \Apilo\Model\OrderTagPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersOrderTagPostRequest($order, $body, string $contentType = self::contentTypes['restApiOrdersOrderTagPost'][0])
    {

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling restApiOrdersOrderTagPost'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiOrdersOrderTagPost'
            );
        }


        $resourcePath = '/rest/api/orders/{order}/tag/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order !== null) {
            $resourcePath = str_replace(
                '{' . 'order' . '}',
                ObjectSerializer::toPathValue($order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersOrderTagTagDelete
     *
     * Delete order tag
     *
     * @param  string $order Order ID (required)
     * @param  int $tag Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagTagDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiOrdersOrderTagTagDelete($order, $tag, string $contentType = self::contentTypes['restApiOrdersOrderTagTagDelete'][0])
    {
        $this->restApiOrdersOrderTagTagDeleteWithHttpInfo($order, $tag, $contentType);
    }

    /**
     * Operation restApiOrdersOrderTagTagDeleteWithHttpInfo
     *
     * Delete order tag
     *
     * @param  string $order Order ID (required)
     * @param  int $tag Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagTagDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersOrderTagTagDeleteWithHttpInfo($order, $tag, string $contentType = self::contentTypes['restApiOrdersOrderTagTagDelete'][0])
    {
        $request = $this->restApiOrdersOrderTagTagDeleteRequest($order, $tag, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersOrderTagTagDeleteAsync
     *
     * Delete order tag
     *
     * @param  string $order Order ID (required)
     * @param  int $tag Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagTagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersOrderTagTagDeleteAsync($order, $tag, string $contentType = self::contentTypes['restApiOrdersOrderTagTagDelete'][0])
    {
        return $this->restApiOrdersOrderTagTagDeleteAsyncWithHttpInfo($order, $tag, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersOrderTagTagDeleteAsyncWithHttpInfo
     *
     * Delete order tag
     *
     * @param  string $order Order ID (required)
     * @param  int $tag Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagTagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersOrderTagTagDeleteAsyncWithHttpInfo($order, $tag, string $contentType = self::contentTypes['restApiOrdersOrderTagTagDelete'][0])
    {
        $returnType = '';
        $request = $this->restApiOrdersOrderTagTagDeleteRequest($order, $tag, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersOrderTagTagDelete'
     *
     * @param  string $order Order ID (required)
     * @param  int $tag Tag ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersOrderTagTagDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersOrderTagTagDeleteRequest($order, $tag, string $contentType = self::contentTypes['restApiOrdersOrderTagTagDelete'][0])
    {

        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling restApiOrdersOrderTagTagDelete'
            );
        }

        // verify the required parameter 'tag' is set
        if ($tag === null || (is_array($tag) && count($tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag when calling restApiOrdersOrderTagTagDelete'
            );
        }


        $resourcePath = '/rest/api/orders/{order}/tag/{tag}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order !== null) {
            $resourcePath = str_replace(
                '{' . 'order' . '}',
                ObjectSerializer::toPathValue($order),
                $resourcePath
            );
        }
        // path params
        if ($tag !== null) {
            $resourcePath = str_replace(
                '{' . 'tag' . '}',
                ObjectSerializer::toPathValue($tag),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersPaymentMapGet
     *
     * Get Payment types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPaymentMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersPaymentMapGet(string $contentType = self::contentTypes['restApiOrdersPaymentMapGet'][0])
    {
        list($response) = $this->restApiOrdersPaymentMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersPaymentMapGetWithHttpInfo
     *
     * Get Payment types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPaymentMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersPaymentMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersPaymentMapGet'][0])
    {
        $request = $this->restApiOrdersPaymentMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\MappingDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\MappingDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\MappingDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\MappingDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersPaymentMapGetAsync
     *
     * Get Payment types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPaymentMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersPaymentMapGetAsync(string $contentType = self::contentTypes['restApiOrdersPaymentMapGet'][0])
    {
        return $this->restApiOrdersPaymentMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersPaymentMapGetAsyncWithHttpInfo
     *
     * Get Payment types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPaymentMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersPaymentMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersPaymentMapGet'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->restApiOrdersPaymentMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersPaymentMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPaymentMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersPaymentMapGetRequest(string $contentType = self::contentTypes['restApiOrdersPaymentMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/payment/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersPlatformMapGet
     *
     * Get Platform list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPlatformMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersPlatformMapGet(string $contentType = self::contentTypes['restApiOrdersPlatformMapGet'][0])
    {
        list($response) = $this->restApiOrdersPlatformMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersPlatformMapGetWithHttpInfo
     *
     * Get Platform list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPlatformMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersPlatformMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersPlatformMapGet'][0])
    {
        $request = $this->restApiOrdersPlatformMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\MappingDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\MappingDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\MappingDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\MappingDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersPlatformMapGetAsync
     *
     * Get Platform list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPlatformMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersPlatformMapGetAsync(string $contentType = self::contentTypes['restApiOrdersPlatformMapGet'][0])
    {
        return $this->restApiOrdersPlatformMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersPlatformMapGetAsyncWithHttpInfo
     *
     * Get Platform list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPlatformMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersPlatformMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersPlatformMapGet'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->restApiOrdersPlatformMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersPlatformMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPlatformMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersPlatformMapGetRequest(string $contentType = self::contentTypes['restApiOrdersPlatformMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/platform/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersPost
     *
     * Create a new order
     *
     * @param  \Apilo\Model\RestOrderWriteDTO $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersPost200Response|\Apilo\Model\RestApiOrdersPost200Response|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersPost($body = null, string $contentType = self::contentTypes['restApiOrdersPost'][0])
    {
        list($response) = $this->restApiOrdersPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersPostWithHttpInfo
     *
     * Create a new order
     *
     * @param  \Apilo\Model\RestOrderWriteDTO $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersPost200Response|\Apilo\Model\RestApiOrdersPost200Response|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersPostWithHttpInfo($body = null, string $contentType = self::contentTypes['restApiOrdersPost'][0])
    {
        $request = $this->restApiOrdersPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Apilo\Model\RestApiOrdersPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersPostAsync
     *
     * Create a new order
     *
     * @param  \Apilo\Model\RestOrderWriteDTO $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersPostAsync($body = null, string $contentType = self::contentTypes['restApiOrdersPost'][0])
    {
        return $this->restApiOrdersPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersPostAsyncWithHttpInfo
     *
     * Create a new order
     *
     * @param  \Apilo\Model\RestOrderWriteDTO $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersPostAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['restApiOrdersPost'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersPost200Response';
        $request = $this->restApiOrdersPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersPost'
     *
     * @param  \Apilo\Model\RestOrderWriteDTO $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersPostRequest($body = null, string $contentType = self::contentTypes['restApiOrdersPost'][0])
    {



        $resourcePath = '/rest/api/orders/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersShipmentStatusMapGet
     *
     * Get shipment status map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersShipmentStatusMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersShipmentStatusMapGet(string $contentType = self::contentTypes['restApiOrdersShipmentStatusMapGet'][0])
    {
        list($response) = $this->restApiOrdersShipmentStatusMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersShipmentStatusMapGetWithHttpInfo
     *
     * Get shipment status map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersShipmentStatusMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersShipmentStatusMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersShipmentStatusMapGet'][0])
    {
        $request = $this->restApiOrdersShipmentStatusMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersShipmentStatusMapGetAsync
     *
     * Get shipment status map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersShipmentStatusMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersShipmentStatusMapGetAsync(string $contentType = self::contentTypes['restApiOrdersShipmentStatusMapGet'][0])
    {
        return $this->restApiOrdersShipmentStatusMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersShipmentStatusMapGetAsyncWithHttpInfo
     *
     * Get shipment status map
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersShipmentStatusMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersShipmentStatusMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersShipmentStatusMapGet'][0])
    {
        $returnType = '\Apilo\Model\RestApiOrdersShipmentStatusMapGet200ResponseInner[]';
        $request = $this->restApiOrdersShipmentStatusMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersShipmentStatusMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersShipmentStatusMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersShipmentStatusMapGetRequest(string $contentType = self::contentTypes['restApiOrdersShipmentStatusMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/shipment/status/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersStatusMapGet
     *
     * Get order Status types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersStatusMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersStatusMapGet(string $contentType = self::contentTypes['restApiOrdersStatusMapGet'][0])
    {
        list($response) = $this->restApiOrdersStatusMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersStatusMapGetWithHttpInfo
     *
     * Get order Status types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersStatusMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersStatusMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersStatusMapGet'][0])
    {
        $request = $this->restApiOrdersStatusMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\MappingDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\MappingDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\MappingDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\MappingDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersStatusMapGetAsync
     *
     * Get order Status types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersStatusMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersStatusMapGetAsync(string $contentType = self::contentTypes['restApiOrdersStatusMapGet'][0])
    {
        return $this->restApiOrdersStatusMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersStatusMapGetAsyncWithHttpInfo
     *
     * Get order Status types list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersStatusMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersStatusMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersStatusMapGet'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->restApiOrdersStatusMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersStatusMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersStatusMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersStatusMapGetRequest(string $contentType = self::contentTypes['restApiOrdersStatusMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/status/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiOrdersTagMapGet
     *
     * Tag list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersTagMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2
     */
    public function restApiOrdersTagMapGet(string $contentType = self::contentTypes['restApiOrdersTagMapGet'][0])
    {
        list($response) = $this->restApiOrdersTagMapGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiOrdersTagMapGetWithHttpInfo
     *
     * Tag list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersTagMapGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\MappingDTO[]|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiOrdersTagMapGetWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersTagMapGet'][0])
    {
        $request = $this->restApiOrdersTagMapGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\MappingDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\MappingDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\MappingDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\MappingDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\MappingDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiOrdersTagMapGetAsync
     *
     * Tag list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersTagMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersTagMapGetAsync(string $contentType = self::contentTypes['restApiOrdersTagMapGet'][0])
    {
        return $this->restApiOrdersTagMapGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiOrdersTagMapGetAsyncWithHttpInfo
     *
     * Tag list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersTagMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiOrdersTagMapGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiOrdersTagMapGet'][0])
    {
        $returnType = '\Apilo\Model\MappingDTO[]';
        $request = $this->restApiOrdersTagMapGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiOrdersTagMapGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiOrdersTagMapGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiOrdersTagMapGetRequest(string $contentType = self::contentTypes['restApiOrdersTagMapGet'][0])
    {


        $resourcePath = '/rest/api/orders/tag/map/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
