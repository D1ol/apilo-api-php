<?php
/**
 * WarehouseApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apilo REST API
 *
 * Dokumentacja REST API dla Apilo # Obsługa zasobów API    Dla wszystkich zasobów niezwiązanych z procesem autoryzacji należy dołączyć następujące nagłówki:  ``` Accept: application/json Content-Type: application/json Authorization: Bearer access_token ```     Dla każdego zapytania (również autoryzacyjnych) należy określić typ mediów (nagłówek    Accept oraz Content-Type), będzie to zawsze application/json.    Zarówno dla zapytań wysyłanych na serwer jak i danych zwracanych przez serwer    stosowany jest format danych (payload) JSON. Należy odpowiednio dla zapytań enkodować    dane do tego formatu oraz dla odpowiedzi dekodować dane tego formatu.     Przesyłając dane do API:    Pola opcjonalne można wypełnić lub przypisać im wartość null w przypadku zapytań    POST/PUT lub nie przesyłać ich w przypadku filtrów GET.    Pola obowiązkowe należy zawsze wypełnić właściwą wartością. # Filtry dla list     Dla zasobów typu GET z listą wyników można stosować dodatkowe filtry manipulujące     wynikami. Parametry należy przekazać w URL zaraz za znakiem kończącym adres zasobu,     np. `.../api/orders/?limit=200`     Dla list dostępne są dwa ogólne filtry:  `int` `limit` - Limit zwracanych wyników (maksymalnie 2000) `int` `offset` - Wskaźnik pozycji (0 - sam początek, 1 - pomija jeden rekord, 256 - pomija 256     rekordów) # Format daty     Daty dla przesyłanych wartości (filtry oraz przesyłane obiekty metodą POST/PUT)     stosowany jest format daty ISO 8601 w następującym formacie:     `DateTimeIso` `YYYY-MM-DDTHH-MM-SSZ`     Domyślnie w takim formacie stosowany jest czas zulu (trzeba uwzględnić przesunięcie     względem strefy czasowej). Czas Zulu można zastąpić lokalizacją strefy czasowej, np. w     przypadku Polski jest to +0200 w przypadku czasu letniego lub +0100 w przypadku czasu     podstawowego (przekazując strefę czasową w filtrze - parametr GET - należy pamiętać o     zakodowaniu znaku plusa, w przeciwnym wypadku zostanie zinterpretowany jako spacja).  `2021-03-01T14:00:00+0100`     <SecurityDefinitions />
 *
 * The version of the OpenAPI document: 1.22.10.14
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apilo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Apilo\ApiException;
use Apilo\Configuration;
use Apilo\HeaderSelector;
use Apilo\ObjectSerializer;

/**
 * WarehouseApi Class Doc Comment
 *
 * @category Class
 * @package  Apilo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WarehouseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'restApiWarehouseAttributePost' => [
            'application/json',
        ],
        'restApiWarehouseCategoryGet' => [
            'application/json',
        ],
        'restApiWarehouseCategoryPost' => [
            'application/json',
        ],
        'restApiWarehousePriceCalculatedGet' => [
            'application/json',
        ],
        'restApiWarehousePriceCalculatedPost' => [
            'application/json',
        ],
        'restApiWarehousePriceCalculatedProductPriceDelete' => [
            'application/json',
        ],
        'restApiWarehousePriceGet' => [
            'application/json',
        ],
        'restApiWarehouseProductGet' => [
            'application/json',
        ],
        'restApiWarehouseProductIdDelete' => [
            'application/json',
        ],
        'restApiWarehouseProductIdGet' => [
            'application/json',
        ],
        'restApiWarehouseProductPatch' => [
            'application/json',
        ],
        'restApiWarehouseProductPost' => [
            'application/json',
        ],
        'restApiWarehouseProductPut' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restApiWarehouseAttributePost
     *
     * Attribute create
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseAttributePost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiWarehouseAttributePost(string $contentType = self::contentTypes['restApiWarehouseAttributePost'][0])
    {
        $this->restApiWarehouseAttributePostWithHttpInfo($contentType);
    }

    /**
     * Operation restApiWarehouseAttributePostWithHttpInfo
     *
     * Attribute create
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseAttributePost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseAttributePostWithHttpInfo(string $contentType = self::contentTypes['restApiWarehouseAttributePost'][0])
    {
        $request = $this->restApiWarehouseAttributePostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseAttributePostAsync
     *
     * Attribute create
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseAttributePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseAttributePostAsync(string $contentType = self::contentTypes['restApiWarehouseAttributePost'][0])
    {
        return $this->restApiWarehouseAttributePostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseAttributePostAsyncWithHttpInfo
     *
     * Attribute create
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseAttributePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseAttributePostAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiWarehouseAttributePost'][0])
    {
        $returnType = '';
        $request = $this->restApiWarehouseAttributePostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseAttributePost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseAttributePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseAttributePostRequest(string $contentType = self::contentTypes['restApiWarehouseAttributePost'][0])
    {


        $resourcePath = '/rest/api/warehouse/attribute/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseCategoryGet
     *
     * Categories list
     *
     * @param  int $id id (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetCategoriesResponse
     */
    public function restApiWarehouseCategoryGet($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseCategoryGet'][0])
    {
        list($response) = $this->restApiWarehouseCategoryGetWithHttpInfo($id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation restApiWarehouseCategoryGetWithHttpInfo
     *
     * Categories list
     *
     * @param  int $id (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetCategoriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseCategoryGetWithHttpInfo($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseCategoryGet'][0])
    {
        $request = $this->restApiWarehouseCategoryGetRequest($id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\GetCategoriesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\GetCategoriesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\GetCategoriesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\GetCategoriesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetCategoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseCategoryGetAsync
     *
     * Categories list
     *
     * @param  int $id (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseCategoryGetAsync($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseCategoryGet'][0])
    {
        return $this->restApiWarehouseCategoryGetAsyncWithHttpInfo($id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseCategoryGetAsyncWithHttpInfo
     *
     * Categories list
     *
     * @param  int $id (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseCategoryGetAsyncWithHttpInfo($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseCategoryGet'][0])
    {
        $returnType = '\Apilo\Model\GetCategoriesResponse';
        $request = $this->restApiWarehouseCategoryGetRequest($id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseCategoryGet'
     *
     * @param  int $id (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseCategoryGetRequest($id = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseCategoryGet'][0])
    {





        $resourcePath = '/rest/api/warehouse/category/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseCategoryPost
     *
     * Category create
     *
     * @param  \Apilo\Model\CategoryCreateModel[] $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiWarehouseCategoryPost($body, string $contentType = self::contentTypes['restApiWarehouseCategoryPost'][0])
    {
        $this->restApiWarehouseCategoryPostWithHttpInfo($body, $contentType);
    }

    /**
     * Operation restApiWarehouseCategoryPostWithHttpInfo
     *
     * Category create
     *
     * @param  \Apilo\Model\CategoryCreateModel[] $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseCategoryPostWithHttpInfo($body, string $contentType = self::contentTypes['restApiWarehouseCategoryPost'][0])
    {
        $request = $this->restApiWarehouseCategoryPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\CreateCategoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseCategoryPostAsync
     *
     * Category create
     *
     * @param  \Apilo\Model\CategoryCreateModel[] $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseCategoryPostAsync($body, string $contentType = self::contentTypes['restApiWarehouseCategoryPost'][0])
    {
        return $this->restApiWarehouseCategoryPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseCategoryPostAsyncWithHttpInfo
     *
     * Category create
     *
     * @param  \Apilo\Model\CategoryCreateModel[] $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseCategoryPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['restApiWarehouseCategoryPost'][0])
    {
        $returnType = '';
        $request = $this->restApiWarehouseCategoryPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseCategoryPost'
     *
     * @param  \Apilo\Model\CategoryCreateModel[] $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseCategoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseCategoryPostRequest($body, string $contentType = self::contentTypes['restApiWarehouseCategoryPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiWarehouseCategoryPost'
            );
        }


        $resourcePath = '/rest/api/warehouse/category/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehousePriceCalculatedGet
     *
     * Prices list
     *
     * @param  int $price Price list ID (required)
     * @param  int $offset Start on record (optional)
     * @param  int $limit Limit of returned results, max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\Prices|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiWarehousePriceCalculatedGet($price, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedGet'][0])
    {
        list($response) = $this->restApiWarehousePriceCalculatedGetWithHttpInfo($price, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation restApiWarehousePriceCalculatedGetWithHttpInfo
     *
     * Prices list
     *
     * @param  int $price Price list ID (required)
     * @param  int $offset Start on record (optional)
     * @param  int $limit Limit of returned results, max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\Prices|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehousePriceCalculatedGetWithHttpInfo($price, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedGet'][0])
    {
        $request = $this->restApiWarehousePriceCalculatedGetRequest($price, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\Prices' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\Prices' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\Prices', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\Prices';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\Prices',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehousePriceCalculatedGetAsync
     *
     * Prices list
     *
     * @param  int $price Price list ID (required)
     * @param  int $offset Start on record (optional)
     * @param  int $limit Limit of returned results, max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceCalculatedGetAsync($price, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedGet'][0])
    {
        return $this->restApiWarehousePriceCalculatedGetAsyncWithHttpInfo($price, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehousePriceCalculatedGetAsyncWithHttpInfo
     *
     * Prices list
     *
     * @param  int $price Price list ID (required)
     * @param  int $offset Start on record (optional)
     * @param  int $limit Limit of returned results, max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceCalculatedGetAsyncWithHttpInfo($price, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedGet'][0])
    {
        $returnType = '\Apilo\Model\Prices';
        $request = $this->restApiWarehousePriceCalculatedGetRequest($price, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehousePriceCalculatedGet'
     *
     * @param  int $price Price list ID (required)
     * @param  int $offset Start on record (optional)
     * @param  int $limit Limit of returned results, max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehousePriceCalculatedGetRequest($price, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedGet'][0])
    {

        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling restApiWarehousePriceCalculatedGet'
            );
        }




        $resourcePath = '/rest/api/warehouse/price-calculated/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $price,
            'price', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehousePriceCalculatedPost
     *
     * Price create and update
     *
     * @param  \Apilo\Model\PriceCalculatedPost $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\IdModel|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiWarehousePriceCalculatedPost($body, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedPost'][0])
    {
        list($response) = $this->restApiWarehousePriceCalculatedPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation restApiWarehousePriceCalculatedPostWithHttpInfo
     *
     * Price create and update
     *
     * @param  \Apilo\Model\PriceCalculatedPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\IdModel|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehousePriceCalculatedPostWithHttpInfo($body, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedPost'][0])
    {
        $request = $this->restApiWarehousePriceCalculatedPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Apilo\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\IdModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehousePriceCalculatedPostAsync
     *
     * Price create and update
     *
     * @param  \Apilo\Model\PriceCalculatedPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceCalculatedPostAsync($body, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedPost'][0])
    {
        return $this->restApiWarehousePriceCalculatedPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehousePriceCalculatedPostAsyncWithHttpInfo
     *
     * Price create and update
     *
     * @param  \Apilo\Model\PriceCalculatedPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceCalculatedPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedPost'][0])
    {
        $returnType = '\Apilo\Model\IdModel';
        $request = $this->restApiWarehousePriceCalculatedPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehousePriceCalculatedPost'
     *
     * @param  \Apilo\Model\PriceCalculatedPost $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehousePriceCalculatedPostRequest($body, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiWarehousePriceCalculatedPost'
            );
        }


        $resourcePath = '/rest/api/warehouse/price-calculated/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehousePriceCalculatedProductPriceDelete
     *
     * Delete price
     *
     * @param  int $product Unique product ID (required)
     * @param  int $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiWarehousePriceCalculatedProductPriceDelete($product, $price, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'][0])
    {
        $this->restApiWarehousePriceCalculatedProductPriceDeleteWithHttpInfo($product, $price, $contentType);
    }

    /**
     * Operation restApiWarehousePriceCalculatedProductPriceDeleteWithHttpInfo
     *
     * Delete price
     *
     * @param  int $product Unique product ID (required)
     * @param  int $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehousePriceCalculatedProductPriceDeleteWithHttpInfo($product, $price, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'][0])
    {
        $request = $this->restApiWarehousePriceCalculatedProductPriceDeleteRequest($product, $price, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehousePriceCalculatedProductPriceDeleteAsync
     *
     * Delete price
     *
     * @param  int $product Unique product ID (required)
     * @param  int $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceCalculatedProductPriceDeleteAsync($product, $price, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'][0])
    {
        return $this->restApiWarehousePriceCalculatedProductPriceDeleteAsyncWithHttpInfo($product, $price, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehousePriceCalculatedProductPriceDeleteAsyncWithHttpInfo
     *
     * Delete price
     *
     * @param  int $product Unique product ID (required)
     * @param  int $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceCalculatedProductPriceDeleteAsyncWithHttpInfo($product, $price, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'][0])
    {
        $returnType = '';
        $request = $this->restApiWarehousePriceCalculatedProductPriceDeleteRequest($product, $price, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehousePriceCalculatedProductPriceDelete'
     *
     * @param  int $product Unique product ID (required)
     * @param  int $price Unique price list ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehousePriceCalculatedProductPriceDeleteRequest($product, $price, string $contentType = self::contentTypes['restApiWarehousePriceCalculatedProductPriceDelete'][0])
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling restApiWarehousePriceCalculatedProductPriceDelete'
            );
        }

        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling restApiWarehousePriceCalculatedProductPriceDelete'
            );
        }


        $resourcePath = '/rest/api/warehouse/price-calculated/{product}/{price}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($price !== null) {
            $resourcePath = str_replace(
                '{' . 'price' . '}',
                ObjectSerializer::toPathValue($price),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehousePriceGet
     *
     * Price lists
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\PriceLists|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiWarehousePriceGet(string $contentType = self::contentTypes['restApiWarehousePriceGet'][0])
    {
        list($response) = $this->restApiWarehousePriceGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation restApiWarehousePriceGetWithHttpInfo
     *
     * Price lists
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\PriceLists|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehousePriceGetWithHttpInfo(string $contentType = self::contentTypes['restApiWarehousePriceGet'][0])
    {
        $request = $this->restApiWarehousePriceGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\PriceLists' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\PriceLists' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\PriceLists', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\PriceLists';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\PriceLists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehousePriceGetAsync
     *
     * Price lists
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceGetAsync(string $contentType = self::contentTypes['restApiWarehousePriceGet'][0])
    {
        return $this->restApiWarehousePriceGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehousePriceGetAsyncWithHttpInfo
     *
     * Price lists
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehousePriceGetAsyncWithHttpInfo(string $contentType = self::contentTypes['restApiWarehousePriceGet'][0])
    {
        $returnType = '\Apilo\Model\PriceLists';
        $request = $this->restApiWarehousePriceGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehousePriceGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehousePriceGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehousePriceGetRequest(string $contentType = self::contentTypes['restApiWarehousePriceGet'][0])
    {


        $resourcePath = '/rest/api/warehouse/price/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseProductGet
     *
     * Products list
     *
     * @param  int $id id (optional)
     * @param  string $sku sku (optional)
     * @param  string $name name (optional)
     * @param  string $ean ean (optional)
     * @param  int $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\GetProductsResponse
     */
    public function restApiWarehouseProductGet($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseProductGet'][0])
    {
        list($response) = $this->restApiWarehouseProductGetWithHttpInfo($id, $sku, $name, $ean, $status, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation restApiWarehouseProductGetWithHttpInfo
     *
     * Products list
     *
     * @param  int $id (optional)
     * @param  string $sku (optional)
     * @param  string $name (optional)
     * @param  string $ean (optional)
     * @param  int $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\GetProductsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseProductGetWithHttpInfo($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseProductGet'][0])
    {
        $request = $this->restApiWarehouseProductGetRequest($id, $sku, $name, $ean, $status, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\GetProductsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\GetProductsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\GetProductsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\GetProductsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\GetProductsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseProductGetAsync
     *
     * Products list
     *
     * @param  int $id (optional)
     * @param  string $sku (optional)
     * @param  string $name (optional)
     * @param  string $ean (optional)
     * @param  int $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductGetAsync($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseProductGet'][0])
    {
        return $this->restApiWarehouseProductGetAsyncWithHttpInfo($id, $sku, $name, $ean, $status, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseProductGetAsyncWithHttpInfo
     *
     * Products list
     *
     * @param  int $id (optional)
     * @param  string $sku (optional)
     * @param  string $name (optional)
     * @param  string $ean (optional)
     * @param  int $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductGetAsyncWithHttpInfo($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseProductGet'][0])
    {
        $returnType = '\Apilo\Model\GetProductsResponse';
        $request = $this->restApiWarehouseProductGetRequest($id, $sku, $name, $ean, $status, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseProductGet'
     *
     * @param  int $id (optional)
     * @param  string $sku (optional)
     * @param  string $name (optional)
     * @param  string $ean (optional)
     * @param  int $status Product status (&#x60;0-inactive&#x60;, &#x60;1-active&#x60;, &#x60;8-archive&#x60;) (optional)
     * @param  int $offset Limit of returned results (optional)
     * @param  int $limit Position indicator (0-beginning, 1-skips one record, 256 - skips 256 records), max 2000 records (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseProductGetRequest($id = null, $sku = null, $name = null, $ean = null, $status = null, $offset = null, $limit = null, string $contentType = self::contentTypes['restApiWarehouseProductGet'][0])
    {









        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sku,
            'sku', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ean,
            'ean', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseProductIdDelete
     *
     * Delete Product
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiWarehouseProductIdDelete($id, string $contentType = self::contentTypes['restApiWarehouseProductIdDelete'][0])
    {
        $this->restApiWarehouseProductIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation restApiWarehouseProductIdDeleteWithHttpInfo
     *
     * Delete Product
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdDelete'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseProductIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['restApiWarehouseProductIdDelete'][0])
    {
        $request = $this->restApiWarehouseProductIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseProductIdDeleteAsync
     *
     * Delete Product
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductIdDeleteAsync($id, string $contentType = self::contentTypes['restApiWarehouseProductIdDelete'][0])
    {
        return $this->restApiWarehouseProductIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseProductIdDeleteAsyncWithHttpInfo
     *
     * Delete Product
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['restApiWarehouseProductIdDelete'][0])
    {
        $returnType = '';
        $request = $this->restApiWarehouseProductIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseProductIdDelete'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseProductIdDeleteRequest($id, string $contentType = self::contentTypes['restApiWarehouseProductIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiWarehouseProductIdDelete'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling WarehouseApi.restApiWarehouseProductIdDelete, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/warehouse/product/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseProductIdGet
     *
     * Get Product detail
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\ProductDetailModel|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiWarehouseProductIdGet($id, string $contentType = self::contentTypes['restApiWarehouseProductIdGet'][0])
    {
        list($response) = $this->restApiWarehouseProductIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation restApiWarehouseProductIdGetWithHttpInfo
     *
     * Get Product detail
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdGet'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\ProductDetailModel|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseProductIdGetWithHttpInfo($id, string $contentType = self::contentTypes['restApiWarehouseProductIdGet'][0])
    {
        $request = $this->restApiWarehouseProductIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\ProductDetailModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\ProductDetailModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\ProductDetailModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\ProductDetailModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\ProductDetailModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseProductIdGetAsync
     *
     * Get Product detail
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductIdGetAsync($id, string $contentType = self::contentTypes['restApiWarehouseProductIdGet'][0])
    {
        return $this->restApiWarehouseProductIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseProductIdGetAsyncWithHttpInfo
     *
     * Get Product detail
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['restApiWarehouseProductIdGet'][0])
    {
        $returnType = '\Apilo\Model\ProductDetailModel';
        $request = $this->restApiWarehouseProductIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseProductIdGet'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseProductIdGetRequest($id, string $contentType = self::contentTypes['restApiWarehouseProductIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restApiWarehouseProductIdGet'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling WarehouseApi.restApiWarehouseProductIdGet, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/rest/api/warehouse/product/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseProductPatch
     *
     * Products PATCH update
     *
     * @param  \Apilo\Model\ProductBaseModel[] $body Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPatch'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiWarehouseProductPatch($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPatch'][0])
    {
        $this->restApiWarehouseProductPatchWithHttpInfo($body, $contentType);
    }

    /**
     * Operation restApiWarehouseProductPatchWithHttpInfo
     *
     * Products PATCH update
     *
     * @param  \Apilo\Model\ProductBaseModel[] $body Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPatch'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseProductPatchWithHttpInfo($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPatch'][0])
    {
        $request = $this->restApiWarehouseProductPatchRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseProductPatchAsync
     *
     * Products PATCH update
     *
     * @param  \Apilo\Model\ProductBaseModel[] $body Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductPatchAsync($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPatch'][0])
    {
        return $this->restApiWarehouseProductPatchAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseProductPatchAsyncWithHttpInfo
     *
     * Products PATCH update
     *
     * @param  \Apilo\Model\ProductBaseModel[] $body Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductPatchAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPatch'][0])
    {
        $returnType = '';
        $request = $this->restApiWarehouseProductPatchRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseProductPatch'
     *
     * @param  \Apilo\Model\ProductBaseModel[] $body Maksymalnie 512 rekordów, aktualizacja po id lub originalCode (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseProductPatchRequest($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPatch'][0])
    {



        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseProductPost
     *
     * Products create
     *
     * @param  \Apilo\Model\Products[] $body 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Apilo\Model\ProductsNotCreateResponse|\Apilo\Model\ProductsCreateResponse|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2
     */
    public function restApiWarehouseProductPost($body, string $contentType = self::contentTypes['restApiWarehouseProductPost'][0])
    {
        list($response) = $this->restApiWarehouseProductPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation restApiWarehouseProductPostWithHttpInfo
     *
     * Products create
     *
     * @param  \Apilo\Model\Products[] $body 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPost'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Apilo\Model\ProductsNotCreateResponse|\Apilo\Model\ProductsCreateResponse|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2|\Apilo\Model\RestBundleException2, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseProductPostWithHttpInfo($body, string $contentType = self::contentTypes['restApiWarehouseProductPost'][0])
    {
        $request = $this->restApiWarehouseProductPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Apilo\Model\ProductsNotCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\ProductsNotCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\ProductsNotCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Apilo\Model\ProductsCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\ProductsCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\ProductsCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Apilo\Model\RestBundleException2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Apilo\Model\RestBundleException2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Apilo\Model\RestBundleException2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Apilo\Model\ProductsNotCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\ProductsNotCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\ProductsCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseProductPostAsync
     *
     * Products create
     *
     * @param  \Apilo\Model\Products[] $body 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductPostAsync($body, string $contentType = self::contentTypes['restApiWarehouseProductPost'][0])
    {
        return $this->restApiWarehouseProductPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseProductPostAsyncWithHttpInfo
     *
     * Products create
     *
     * @param  \Apilo\Model\Products[] $body 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['restApiWarehouseProductPost'][0])
    {
        $returnType = '\Apilo\Model\ProductsNotCreateResponse';
        $request = $this->restApiWarehouseProductPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseProductPost'
     *
     * @param  \Apilo\Model\Products[] $body 1 Ponieważ pojedynczy produkt tworzony jest w systemie Apilo zawsze jako grupa     produktów z jedną kombinacją produktu, domyślnie nazwa grupy jest również nazwą     produktu. Aby “sterować” nazwą grupy produktów należy wypełnić dodatkowe pole o nazwie     groupName (np. groupName&#x3D;Rolki agresywne EXTREM II name&#x3D;Kolor niebieski      2 Przekazana tablica zdjęć może być tablicą asocjacyjną gdzie kluczem jest zewnętrzny     identyfikator zdjęcia (przydatne przy aktualizacji produktu - zostaną dodane tylko     nieistniejące pozycje w systemie Apilo), a wartością adres URL zdjęcia. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseProductPostRequest($body, string $contentType = self::contentTypes['restApiWarehouseProductPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiWarehouseProductPost'
            );
        }


        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiWarehouseProductPut
     *
     * Products data update
     *
     * @param  \Apilo\Model\ProductPut[] $body Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restApiWarehouseProductPut($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPut'][0])
    {
        $this->restApiWarehouseProductPutWithHttpInfo($body, $contentType);
    }

    /**
     * Operation restApiWarehouseProductPutWithHttpInfo
     *
     * Products data update
     *
     * @param  \Apilo\Model\ProductPut[] $body Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \Apilo\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiWarehouseProductPutWithHttpInfo($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPut'][0])
    {
        $request = $this->restApiWarehouseProductPutRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Apilo\Model\RestBundleException2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiWarehouseProductPutAsync
     *
     * Products data update
     *
     * @param  \Apilo\Model\ProductPut[] $body Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductPutAsync($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPut'][0])
    {
        return $this->restApiWarehouseProductPutAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiWarehouseProductPutAsyncWithHttpInfo
     *
     * Products data update
     *
     * @param  \Apilo\Model\ProductPut[] $body Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiWarehouseProductPutAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPut'][0])
    {
        $returnType = '';
        $request = $this->restApiWarehouseProductPutRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiWarehouseProductPut'
     *
     * @param  \Apilo\Model\ProductPut[] $body Aktualizacja danych identyfikacyjnych produktu możliwa jest wg. następujących zasad:     ● Nie można dokonać zmiany pól id oraz originalCode ,     ● Wypełniając pole id lub originalCode można dokonać aktualizacji wszystkich     pozostałych danych identyfikacyjnych (w tym sku oraz ean),     ● nie przekazując pól id oraz originalCode można dokonać aktualizacji tylko danych     nie identyfikacyjnych produktu (za wyjątkiem ean) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restApiWarehouseProductPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restApiWarehouseProductPutRequest($body = null, string $contentType = self::contentTypes['restApiWarehouseProductPut'][0])
    {



        $resourcePath = '/rest/api/warehouse/product/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
